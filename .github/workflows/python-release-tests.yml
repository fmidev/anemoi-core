name: Test Release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # filter for PRs that change the manifest to only run the tests on release PRs. (Other PRs should not change the manifest)
    paths:
      - ".release-please-manifest.json"

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        platform: ["ubuntu-latest", "macos-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 60

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-md pytest-emoji

    - name: Detect package to be released
      id: release-package
      run: |
        # Compare with the PR base to detect which changelog file has changed
        MERGE_BASE=$(git merge-base origin/${{ github.event.pull_request.base.ref }} ${{ github.event.pull_request.head.sha }})
        CHANGED_FILES=$(git diff --name-only $MERGE_BASE...${{ github.event.pull_request.head.sha }})
        echo "Changed files:"
        echo "$CHANGED_FILES"
        echo "training_release=$(echo "$CHANGED_FILES" | grep -q '^training/CHANGELOG' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        echo "graphs_release=$(echo "$CHANGED_FILES" | grep -q '^graphs/CHANGELOG' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        echo "models_release=$(echo "$CHANGED_FILES" | grep -q '^models/CHANGELOG' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

    - name: Install packages
      if: ${{steps.release-package.outputs.training_release == 'true' || steps.release-package.outputs.graphs_release == 'true' || steps.release-package.outputs.models_release == 'true' }}
      run: |
        if [[ ${{ steps.release-package.outputs.training_release }} == 'true' ]]; then
          pip install -e ./training[all,tests]
        elif [[ ${{ steps.release-package.outputs.graphs_release }} == 'true' ]]; then
          pip install -e ./graphs[all,tests]
        elif [[ ${{ steps.release-package.outputs.models_release }} == 'true' ]]; then
          pip install -e ./models[all,tests]
        fi

    - name: Run pytest for training package
      if: ${{steps.release-package.outputs.training_release == 'true' }}
      uses: pavelzw/pytest-action@v2
      with:
        report-title: "Test report Anemoi Training (python ${{ matrix.python-version }} on ${{ matrix.platform }})"
        custom-pytest: pytest ./training

    - name: Run pytest for graphs package
      if: ${{steps.release-package.outputs.graphs_release == 'true' }}
      uses: pavelzw/pytest-action@v2
      with:
        report-title: "Test report Anemoi Graphs (python ${{ matrix.python-version }} on ${{ matrix.platform }})"
        custom-pytest: pytest ./graphs

    - name: Run pytest for models package
      if: ${{steps.release-package.outputs.models_release == 'true' }}
      uses: pavelzw/pytest-action@v2
      with:
        report-title: "Test report Anemoi Models (python ${{ matrix.python-version }} on ${{ matrix.platform }})"
        custom-pytest: pytest ./models
